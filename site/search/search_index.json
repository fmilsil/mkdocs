{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u00cdndice de Pr\u00e1cticas","text":"<p>Este documento contiene un listado de pr\u00e1cticas realizados a lo largo del curso.</p>"},{"location":"#practicas","title":"Pr\u00e1cticas","text":"<ul> <li>Pr\u00e1ctica 5.4 - Instalaci\u00f3n de una p\u00e1gina web con DockerFile y DockerCompose</li> <li>Pr\u00e1ctica 5.2 - Instalaci\u00f3n de Wordpress con DockerFile y DockerCompose</li> <li>Pr\u00e1ctica 5.1 - Instalaci\u00f3n de PretaShop con DockerFile y DockerCompose</li> </ul> <p>Este \u00edndice se actualizar\u00e1 conforme se agreguen m\u00e1s repositorios y pr\u00e1cticas.</p>"},{"location":"p51/","title":"practica-5.1","text":"<p>En esta pr\u00e1ctica vamos a utilizar Docker y Docker Compose para la instalaci\u00f3n de una PrestaShop.</p> <p>Para ello necesitaremos un archivo <code>docker-compose.yml</code>, el instalador de Docker (en caso de no tenerlo instalado) y un archivo de configuraciones <code>.env</code></p> <p>A continuaci\u00f3n dejo los contenidos de los archivos utilizados:</p>"},{"location":"p51/#instalar_dockersh-opcional","title":"instalar_docker.sh OPCIONAL","text":"<pre><code>#Script de instalaci\u00f3n de Docker y Docker Compose\n#Referencia: https://docs.docker.com/engine/install/ubuntu/\nset -x\n\n#Actualizamos los repositorios\napt update\n\n#Instalamos los paquetes necesarios para que apt pueda usar repositorios sobre HTTPS\napt install -y \\\n    ca-certificates \\\n    curl \\\n    gnupg \\\n    lsb-release\n\n#A\u00f1adimos la clave GPG oficial de Docker\nmkdir -p /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n\n#A\u00f1adimos el repositorio oficial de Docker a nuestro sistema\necho \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\\n  $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\n\n#Actualizamos la lista de paquetes\napt update\n\n#Instalamos la \u00faltima versi\u00f3n de Docker y Docker Compose\napt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin\n\n#A\u00f1adimos el usuario actual al grupo docker\nusermod -aG docker $USER\n\n#Habilitamos el servicio de Docker para que se inicie autom\u00e1ticamente al arrancar el sistema\nsystemctl enable docker\n\n#Iniciamos el servicio de Docker\nsystemctl start docker\n</code></pre>"},{"location":"p51/#docker-composeyml","title":"docker-compose.yml","text":"<pre><code>version: '3.4'\n\nservices:\n  mysql:\n    image: mysql:9.1\n    ports: \n      - 3306:3306\n    environment: \n      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}\n      - MYSQL_DATABASE=${MYSQL_DATABASE}\n      - MYSQL_USER=${MYSQL_USER}\n      - MYSQL_PASSWORD=${MYSQL_PASSWORD}\n    volumes: \n      - mysql_data:/var/lib/mysql\n    networks: \n      - backend-network\n    restart: always\n\n  phpmyadmin:\n    image: phpmyadmin:5.2.1\n    ports:\n      - 8080:80\n    environment: \n      - PMA_ARBITRARY=1\n    networks: \n      - backend-network\n      - frontend-network\n    restart: always\n    depends_on: \n      - mysql\n\n  prestashop:\n    image: prestashop/prestashop:8\n    environment: \n      - DB_SERVER=mysql\n    volumes:\n      - prestashop_data:/var/www/html\n    networks: \n      - backend-network\n      - frontend-network\n    restart: always\n    depends_on: \n      - mysql\n\n  https-portal:\n    image: steveltn/https-portal:1\n    ports:\n      - 80:80\n      - 443:443\n    restart: always\n    environment:\n      DOMAINS: \"${DOMAIN} -&gt; http://prestashop:80\"\n      STAGE: 'production' # Don't use production until staging works\n      # FORCE_RENEW: 'true'\n    networks:\n      - frontend-network\n\nvolumes:\n  mysql_data:\n  prestashop_data:\n\nnetworks: \n  backend-network:\n  frontend-network:\n</code></pre>"},{"location":"p51/#archivo-env","title":"archivo .env","text":"<pre><code>MYSQL_ROOT_PASSWORD=fran\nMYSQL_DATABASE=prestashop\nMYSQL_USER=fran\nMYSQL_PASSWORD=a\nDOMAIN=docker-fms.zapto.org\n</code></pre> <p>Ahora dejo unas capturas para verificar su funcionamiento:</p>"},{"location":"p51/#captura-del-resultado-del-docker-composeyml","title":"Captura del resultado del <code>docker-compose.yml</code>:","text":""},{"location":"p51/#parte-1-comprobacion-de-la-pagina","title":"Parte 1: Comprobaci\u00f3n de la p\u00e1gina:","text":""},{"location":"p51/#parte-2-comprobacion-de-la-pagina","title":"Parte 2: Comprobaci\u00f3n de la p\u00e1gina:","text":""},{"location":"p52/","title":"practica-5.2","text":"<p>En esta pr\u00e1ctica vamos a instalar WordPress, haciendo uso de Docker y Docker Compose.</p> <p>Para ello, vamos a utilizar un archivo para instalar los docker (no es necesario, si ya tenemos los docker instalados), un archivo llamado <code>docker-compose.yml</code> y por \u00faltimo un archivo de varibales denominado <code>.env</code></p> <p>A continuaci\u00f3n dejo el contenido de los archivos usado en esta pr\u00e1ctica:</p>"},{"location":"p52/#instalar_dockersh-opcional","title":"instalar_docker.sh OPCIONAL:","text":"<pre><code>#Script de instalaci\u00f3n de Docker y Docker Compose\n#Referencia: https://docs.docker.com/engine/install/ubuntu/\nset -x\n\n#Actualizamos los repositorios\napt update\n\n#Instalamos los paquetes necesarios para que apt pueda usar repositorios sobre HTTPS\napt install -y \\\n    ca-certificates \\\n    curl \\\n    gnupg \\\n    lsb-release\n\n#A\u00f1adimos la clave GPG oficial de Docker\nmkdir -p /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n\n#A\u00f1adimos el repositorio oficial de Docker a nuestro sistema\necho \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\\n  $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\n\n#Actualizamos la lista de paquetes\napt update\n\n#Instalamos la \u00faltima versi\u00f3n de Docker y Docker Compose\napt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin\n\n#A\u00f1adimos el usuario actual al grupo docker\nusermod -aG docker $USER\n\n#Habilitamos el servicio de Docker para que se inicie autom\u00e1ticamente al arrancar el sistema\nsystemctl enable docker\n\n#Iniciamos el servicio de Docker\nsystemctl start docker\n</code></pre>"},{"location":"p52/#docker-composeyml","title":"docker-compose.yml:","text":"<pre><code>version: '3'\n\nservices:\n  mysql:\n    env_file:\n      - .env\n    image: mysql:8.0\n    environment:\n      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}\n      - MYSQL_DATABASE=${WORDPRESS_DB_NAME}\n      - MYSQL_USER=${WORDPRESS_DB_USER}\n      - MYSQL_PASSWORD=${WORDPRESS_DB_PASSWORD}\n    volumes:\n      - mysql_data:/var/lib/mysql\n    networks:\n        - backend-network\n    restart: always\n\n  phpmyadmin:\n    image: phpmyadmin\n    ports:\n      - 8080:80\n    environment: \n      - PMA_ARBITRARY=1\n    networks:\n      - backend-network\n    restart: always\n\n  wordpress:\n    env_file:\n      - .env\n    image: bitnami/wordpress:latest\n    environment:\n      - DB_SERVER=mysql\n      - WORDPRESS_DATABASE_USER=${WORDPRESS_DB_USER}\n      - WORDPRESS_DATABASE_NAME=${WORDPRESS_DB_NAME}\n      - WORDPRESS_DATABASE_PASSWORD=${WORDPRESS_DB_PASSWORD}\n      - WORDPRESS_DATABASE_HOST=mysql\n      - WORDPRESS_DATABASE_PORT_NUMBER=3306\n    volumes:\n      - wordpress:/var/www/html\n    networks:\n      - backend-network\n      - frontend-network\n    restart: always\n    depends_on:\n      - mysql\n\n  https-portal:\n    image: steveltn/https-portal:1\n    ports:\n      - 80:80\n      - 443:443\n    restart: always\n    environment:\n      DOMAINS: \"${DOMAIN} -&gt; http://wordpress:8080\"\n      stage: 'production'\n    networks:\n      - frontend-network\n\nvolumes: \n  mysql_data:\n  wordpress:\n\nnetworks:\n  backend-network:\n  frontend-network:\n</code></pre>"},{"location":"p52/#archivo-de-variables-env","title":"archivo de variables .env:","text":"<pre><code>MYSQL_ROOT_PASSWORD=a\nWORDPRESS_DB_NAME=wordpress\nWORDPRESS_DB_USER=fran\nWORDPRESS_DB_PASSWORD=a\n\nWORDPRESS_DB_USER=fran\nWORDPRESS_DB_NAME=a\nWORDPRESS_DB_PASSWORD=a\n\nDOMAIN=docker-fms.zapto.org\n</code></pre> <p>Ahora, dejo capturas para validar el uso de los scripts:</p>"},{"location":"p52/#captura-del-resultado-del-docker-compaseyml","title":"Captura del resultado del <code>docker-compase.yml</code>:","text":""},{"location":"p52/#captura-del-funcionamiento-de-la-pagina","title":"Captura del funcionamiento de la p\u00e1gina:","text":""},{"location":"p54/","title":"practica-5.4","text":"<p>En esta pr\u00e1ctica vamos a utilizar docker hub junto con varias herramientas de docker como Dockerfile y Docker-Compose, para la instalaci\u00f3n de una p\u00e1gina web.</p> <p>A continuaci\u00f3n dejo el contenio de los aechivos utilizados:</p>"},{"location":"p54/#dockerfile","title":"Dockerfile:","text":"<pre><code>FROM ubuntu:24.04\n\nLABEL AUTHOR=\"Francisco Mil\u00e1n Siles\"\nLABEL DESCRIPTION=\"Prueba de instalaci\u00f3n\"\n\nENV WORDPRESS_DB_HOST=mysql\n\n\nRUN apt update &amp;&amp; \\\n    apt install nginx -y &amp;&amp; \\\n    apt install git -y &amp;&amp; \\\n    rm -rf /var/lib/apt/list/*\n\nRUN git clone https://github.com/josejuansanchez/2048 /app &amp;&amp; \\\n    mv /app/* /var/www/html/\n\nEXPOSE 80\n\nCMD [ \"nginx\",\"-g\", \"daemon off;\" ]\n</code></pre>"},{"location":"p54/#docker-composeyml","title":"docker-compose.yml:","text":"<pre><code>services:\n  web:\n    image: fmilsil/2048\n    container_name: ipprueba\n    ports:\n      - 80:80\n    restart: always\n</code></pre>"},{"location":"p54/#docker-publishyml","title":"docker-publish.yml:","text":"<pre><code>name: Publish image to Docker Hub\n\n# This workflow uses actions that are not certified by GitHub.\n# They are provided by a third-party and are governed by\n# separate terms of service, privacy policy, and support\n# documentation.\n\non:\n  push:\n    branches: [ \"main\" ]\n    # Publish semver tags as releases.\n    tags: [ 'v*.*.*' ]\n  workflow_dispatch:\n\nenv:\n  # Use docker.io for Docker Hub if empty\n  REGISTRY: docker.io\n  # github.repository as &lt;account&gt;/&lt;repo&gt;\n  #IMAGE_NAME: ${{ github.repository }}\n  IMAGE_NAME: 2048\n  IMAGE_TAG: latest\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Set up BuildKit Docker container builder to be able to build\n      # multi-platform images and export cache\n      # https://github.com/docker/setup-buildx-action\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0\n\n      # Login against a Docker registry except on PR\n      # https://github.com/docker/login-action\n      - name: Log into registry ${{ env.REGISTRY }}\n        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0\n        with:\n          registry: ${{ env.REGISTRY }}\n          username: ${{ secrets.DOCKER_USER }}\n          password: ${{ secrets.DOCKER_TOKEN }}\n\n      # This action can be used to check the content of the variables\n      - name: Debug\n        run: |\n          echo \"github.repository: ${{ github.repository }}\"\n          echo \"env.REGISTRY: ${{ env.REGISTRY }}\"\n          echo \"github.sha: ${{ github.sha }}\"\n          echo \"env.IMAGE_NAME: ${{ env.IMAGE_NAME }}\"\n\n      # Build and push Docker image with Buildx (don't push on PR)\n      # https://github.com/docker/build-push-action\n      - name: Build and push Docker image\n        id: build-and-push\n        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0\n        with:\n          context: .\n          push: ${{ github.event_name != 'pull_request' }}\n          tags: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}\n          cache-from: type=gha\n          cache-to: type=gha,mode=max\n</code></pre> <p>Ahora voy adjuntar capturas del funcionamiento de los scripts utilizados.</p>"},{"location":"p54/#dockerhub-subida-de-la-imagen-fmilsil2048","title":"DockerHub: Subida de la imagen fmilsil/2048","text":""},{"location":"p54/#github-subida-de-la-imagen-hasta-dockerhub","title":"GitHub: Subida de la imagen hasta DockerHub","text":""},{"location":"p54/#prueba-de-la-pagina","title":"Prueba de la p\u00e1gina:","text":""}]}